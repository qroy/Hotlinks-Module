<?php

use Drupal\Core\Database\Database;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;
use Drupal\node\Entity\NodeType;
use Drupal\taxonomy\Entity\Vocabulary;

/**
 * Implements hook_help().
 */
function hotlinks_help($route_name, $route_match) {
  if ($route_name === 'help.page.hotlinks') {
    return t('HotLinks is a custom module for managing link directories with categories, ratings, stats and reporting.');
  }
}

/**
 * Implements hook_cron().
 */
function hotlinks_cron() {
  $query = \Drupal::entityTypeManager()->getStorage('node')->getQuery()
    ->condition('type', 'link')
    ->condition('status', 1)
    ->condition('field_link_reported', 0)
    ->range(0, 10)
    ->execute();

  if (empty($query)) {
    return;
  }

  $nids = array_values($query);
  $nodes = \Drupal\node\Entity\Node::loadMultiple($nids);

  foreach ($nodes as $node) {
    $url = $node->get('field_link_url')->uri;

    try {
      $response = \Drupal::httpClient()->head($url, ['timeout' => 5]);
      $code = $response->getStatusCode();
      if ($code >= 400) {
        $node->set('field_link_reported', TRUE);
        $node->save();
      }
    } catch (\Exception $e) {
      $node->set('field_link_reported', TRUE);
      $node->save();
    }
  }
}


<?php

use Drupal\file\Entity\File;
use Drupal\node\NodeInterface;
use GuzzleHttp\Client;

/**
 * Implements hook_entity_presave().
 */
function hotlinks_entity_presave(\Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity instanceof NodeInterface && $entity->bundle() === 'link') {
    // Controleer of er al een thumbnail is
    if (!$entity->get('field_link_thumbnail')->isEmpty()) {
      return;
    }

    // Haal de URL op uit het veld
    $url = $entity->get('field_link_url')->uri;
    if (!$url) {
      return;
    }

    // ScreenshotAPI.net key en endpoint
    $api_key = 'your_api_key_here';
    $screenshot_url = "https://shot.screenshotapi.net/screenshot";
    $query = http_build_query([
      'token' => $api_key,
      'url' => $url,
      'output' => 'image',
      'file_type' => 'png',
      'wait_for_event' => 'load',
      'full_page' => false,
    ]);
    $final_url = $screenshot_url . '?' . $query;

    try {
      $client = new Client();
      $response = $client->get($final_url, ['stream' => true]);
      if ($response->getStatusCode() === 200) {
        $filename = 'public://' . md5($url) . '.png';
        $file = file_save_data($response->getBody()->getContents(), $filename, FILE_EXISTS_REPLACE);
        if ($file instanceof File) {
          $entity->set('field_link_thumbnail', ['target_id' => $file->id()]);
        }
      }
    }
    catch (\Exception $e) {
      \Drupal::logger('hotlinks')->error('Thumbnail generation failed: @msg', ['@msg' => $e->getMessage()]);
    }
  }
}

/**
 * Implements hook_menu_links_discovered_alter().
 */
function hotlinks_menu_links_discovered_alter(&$links) {
  $links['hotlinks.settings'] = [
    'title' => 'Hotlinks Settings',
    'description' => 'Configure ScreenshotAPI key for thumbnails.',
    'route_name' => 'hotlinks.settings',
    'parent' => 'system.admin_config_services',
    'menu_name' => 'admin',
  ];
}
