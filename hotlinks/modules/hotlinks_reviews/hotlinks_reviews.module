<?php

/**
 * @file
 * Enhanced hotlinks_reviews.module with improved security and validation.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\Xss;

/**
 * Implements hook_help().
 */
function hotlinks_reviews_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.hotlinks_reviews':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Hotlinks Reviews submodule adds a Starfleet-approved rating and review system to your hotlinks, bringing the spirit of exploration and evaluation to your link directory.') . '</p>';
      $output .= '<h3>' . t('Features') . '</h3>';
      $output .= '<ul>';
      $output .= '<li>' . t('Starfleet Command rating system (1-5 stars)') . '</li>';
      $output .= '<li>' . t('Away team reports (text reviews)') . '</li>';
      $output .= '<li>' . t('Starfleet approval badges for excellence') . '</li>';
      $output .= '<li>' . t('Bridge officer moderation system') . '</li>';
      $output .= '<li>' . t('Full integration with Star Trek Wormhole categories') . '</li>';
      $output .= '</ul>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function hotlinks_reviews_theme() {
  return [
    'hotlinks_rating_stars' => [
      'variables' => [
        'rating' => 0,
        'count' => 0,
        'max_rating' => 5,
        'compact' => FALSE,
        'interactive' => FALSE,
        'attributes' => [],
        'star_trek_theme' => TRUE,
      ],
      'template' => 'hotlinks-rating-stars',
    ],
    'hotlinks_rating_widget' => [
      'variables' => [
        'rating' => 0,
        'max_rating' => 5,
        'name' => '',
        'star_trek_labels' => FALSE,
        'node_id' => NULL,
      ],
      'template' => 'hotlinks-rating-widget',
    ],
    'hotlinks_review_summary' => [
      'variables' => [
        'average_rating' => 0,
        'total_reviews' => 0,
        'rating_breakdown' => [],
        'starfleet_approved' => FALSE,
      ],
      'template' => 'hotlinks-review-summary',
    ],
    'hotlinks_starfleet_badge' => [
      'variables' => [
        'rating' => 0,
        'badge_type' => 'approved',
        'link_title' => '',
      ],
      'template' => 'hotlinks-starfleet-badge',
    ],
  ];
}

/**
 * Enhanced form alter with Star Trek context and security improvements.
 */
function hotlinks_reviews_form_node_hotlink_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  _hotlinks_reviews_alter_hotlink_form($form, $form_state);
}

function hotlinks_reviews_form_node_hotlink_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  _hotlinks_reviews_alter_hotlink_form($form, $form_state);
}

/**
 * Enhanced form alteration with Star Trek theming and security.
 */
function _hotlinks_reviews_alter_hotlink_form(&$form, FormStateInterface $form_state) {
  $current_user = \Drupal::currentUser();
  $config = \Drupal::config('hotlinks.settings');
  
  if (!$current_user->hasPermission('rate hotlinks') && !$current_user->hasPermission('review hotlinks')) {
    if (isset($form['field_hotlink_rating'])) {
      $form['field_hotlink_rating']['#access'] = FALSE;
    }
    if (isset($form['field_hotlink_review'])) {
      $form['field_hotlink_review']['#access'] = FALSE;
    }
    return;
  }

  // Enhanced descriptions with Star Trek flavor and security notes
  if (isset($form['field_hotlink_rating'])) {
    $use_trek_labels = $config->get('use_star_trek_labels');
    $description = $use_trek_labels ? 
      t('Rate this resource according to Starfleet evaluation standards (1-5 stars).') :
      t('Rate this link from 1 (poor) to 5 (excellent) stars.');
    
    $form['field_hotlink_rating']['widget']['#description'] = $description;
    $form['field_hotlink_rating']['widget']['#star_trek_labels'] = $use_trek_labels;
    
    // Add security attributes
    $form['field_hotlink_rating']['widget']['#attributes']['data-security'] = 'validated';
  }

  if (isset($form['field_hotlink_review'])) {
    $description = $config->get('use_star_trek_labels') ?
      t('Submit your away team report on this resource. What makes it valuable for future missions?') :
      t('Share your thoughts about this link. What makes it useful or noteworthy?');
    
    $form['field_hotlink_review']['widget']['#description'] = $description;
    
    if ($config->get('require_review_text')) {
      $form['field_hotlink_review']['widget'][0]['value']['#required'] = TRUE;
    }
    
    // Add input validation and security attributes
    $form['field_hotlink_review']['widget'][0]['value']['#attributes']['maxlength'] = 2000;
    $form['field_hotlink_review']['widget'][0]['value']['#attributes']['data-security'] = 'validated';
    
    // Add client-side validation
    $form['field_hotlink_review']['widget'][0]['value']['#attributes']['pattern'] = '.{10,2000}';
    $form['field_hotlink_review']['widget'][0]['value']['#attributes']['title'] = t('Review must be between 10 and 2000 characters');
  }

  $form['#validate'][] = '_hotlinks_reviews_validate_review';
  $form['#attached']['library'][] = 'hotlinks_reviews/rating-widget';
  
  // Add Star Trek styling context and security settings
  $node = $form_state->getFormObject()->getEntity();
  $node_id = $node->id() ?: 0;
  
  $form['#attached']['drupalSettings']['hotlinksReviews'] = [
    'useStarTrekLabels' => $config->get('use_star_trek_labels'),
    'starfleetApproval' => $config->get('starfleet_approval'),
    'nodeId' => $node_id,
    'maxReviewLength' => 2000,
    'minReviewLength' => 10,
    'rateLimitWarning' => t('Please wait before submitting another rating or review.'),
  ];
}

/**
 * Enhanced validation with Star Trek context and security checks.
 */
function _hotlinks_reviews_validate_review(&$form, FormStateInterface $form_state) {
  $config = \Drupal::config('hotlinks.settings');
  $rating = $form_state->getValue('field_hotlink_rating');
  $review = $form_state->getValue('field_hotlink_review');

  // Validate rating if provided
  if (!empty($rating[0]['value'])) {
    $rating_value = (int) $rating[0]['value'];
    
    if ($rating_value < 1 || $rating_value > 5) {
      $form_state->setErrorByName('field_hotlink_rating', t('Rating must be between 1 and 5 stars.'));
    }
    
    $min_rating = $config->get('min_rating_for_display') ?: 1;
    if ($rating_value < $min_rating) {
      $form_state->setErrorByName('field_hotlink_rating', t('Rating must be at least @min stars.', ['@min' => $min_rating]));
    }
  }

  // Validate review text if provided
  if (!empty($review[0]['value'])) {
    $review_text = trim($review[0]['value']);
    
    // Length validation
    if (strlen($review_text) > 2000) {
      $form_state->setErrorByName('field_hotlink_review', t('Review text is too long. Maximum 2000 characters.'));
    }
    
    if (strlen($review_text) < 10) {
      $form_state->setErrorByName('field_hotlink_review', t('Review text is too short. Minimum 10 characters.'));
    }
    
    // Security validation - check for suspicious content
    $filtered_text = Xss::filter($review_text);
    if ($filtered_text !== $review_text) {
      $form_state->setErrorByName('field_hotlink_review', t('Review contains invalid content. Please remove any HTML tags or scripts.'));
    }
    
    // Check for spam patterns (basic)
    if (_hotlinks_reviews_is_spam($review_text)) {
      $form_state->setErrorByName('field_hotlink_review', t('Review appears to be spam. Please write a genuine review.'));
    }
  }

  // Require review text if rating is provided and config requires it
  if ($config->get('require_review_text') && !empty($rating[0]['value'])) {
    if (empty($review[0]['value']) || strlen(trim($review[0]['value'])) < 10) {
      $message = $config->get('use_star_trek_labels') ?
        t('A mission report is required when you provide a Starfleet evaluation.') :
        t('A review is required when you provide a rating.');
      $form_state->setErrorByName('field_hotlink_review', $message);
    }
  }

  // Rate limiting check
  $current_user = \Drupal::currentUser();
  if (_hotlinks_reviews_is_rate_limited($current_user->id(), \Drupal::request()->getClientIp())) {
    $form_state->setErrorByName('field_hotlink_rating', t('You are submitting too frequently. Please wait before submitting another rating or review.'));
  }
}

/**
 * Basic spam detection.
 */
function _hotlinks_reviews_is_spam($text) {
  $spam_patterns = [
    '/viagra|cialis|pharmacy/i',
    '/casino|gambling|poker/i',
    '/loan|credit|money/i',
    '/weight.?loss|diet.?pills/i',
    '/https?:\/\/[^\s]{30,}/i', // Long URLs
    '/(.)\1{10,}/', // Repeated characters
  ];
  
  foreach ($spam_patterns as $pattern) {
    if (preg_match($pattern, $text)) {
      return TRUE;
    }
  }
  
  // Check for excessive links
  $link_count = preg_match_all('/https?:\/\//', $text);
  if ($link_count > 2) {
    return TRUE;
  }
  
  return FALSE;
}

/**
 * Check if user/IP is rate limited.
 */
function _hotlinks_reviews_is_rate_limited($user_id, $ip_address) {
  $rate_limit_data = \Drupal::state()->get('hotlinks_reviews.rate_limits', []);
  $current_time = time();
  $rate_limit_window = 300; // 5 minutes
  $max_submissions = 5; // Maximum submissions per window
  
  // Check user-based rate limiting
  if ($user_id > 0) {
    $user_key = 'user_' . $user_id;
    if (isset($rate_limit_data[$user_key])) {
      $submissions = array_filter($rate_limit_data[$user_key], function($timestamp) use ($current_time, $rate_limit_window) {
        return ($current_time - $timestamp) < $rate_limit_window;
      });
      
      if (count($submissions) >= $max_submissions) {
        return TRUE;
      }
    }
  }
  
  // Check IP-based rate limiting
  $ip_key = 'ip_' . $ip_address;
  if (isset($rate_limit_data[$ip_key])) {
    $submissions = array_filter($rate_limit_data[$ip_key], function($timestamp) use ($current_time, $rate_limit_window) {
      return ($current_time - $timestamp) < $rate_limit_window;
    });
    
    if (count($submissions) >= $max_submissions) {
      return TRUE;
    }
  }
  
  return FALSE;
}

/**
 * Enhanced entity presave with better integration and security.
 */
function hotlinks_reviews_entity_presave(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'node' && $entity->bundle() == 'hotlink') {
    _hotlinks_reviews_update_aggregates($entity);
    _hotlinks_reviews_update_starfleet_status($entity);
    _hotlinks_reviews_sanitize_review_content($entity);
  }
}

/**
 * Sanitize review content before saving.
 */
function _hotlinks_reviews_sanitize_review_content(EntityInterface $entity) {
  if ($entity->hasField('field_hotlink_review')) {
    $review_field = $entity->get('field_hotlink_review');
    if (!$review_field->isEmpty()) {
      $review_item = $review_field->first();
      if ($review_item && !empty($review_item->value)) {
        // Sanitize the review text
        $sanitized = Xss::filter($review_item->value);
        $sanitized = Html::escape($sanitized);
        $review_item->setValue($sanitized);
      }
    }
  }
}

/**
 * Enhanced node view with Star Trek integration and security.
 */
function hotlinks_reviews_node_view(array &$build, EntityInterface $entity, $view_mode, $langcode) {
  if ($entity->getEntityTypeId() == 'node' && $entity->bundle() == 'hotlink') {
    $config = \Drupal::config('hotlinks.settings');
    
    if ($view_mode == 'full') {
      $avg_rating = $entity->get('field_hotlink_avg_rating')->value ?: 0;
      $review_count = $entity->get('field_hotlink_review_count')->value ?: 0;
      
      $build['review_summary'] = [
        '#theme' => 'hotlinks_review_summary',
        '#average_rating' => $avg_rating,
        '#total_reviews' => $review_count,
        '#rating_breakdown' => _hotlinks_reviews_get_rating_breakdown($entity->id()),
        '#starfleet_approved' => $avg_rating >= 4.0 && $config->get('starfleet_approval'),
        '#weight' => 3,
        '#cache' => ['tags' => ['node:' . $entity->id()]],
      ];
      
      // Add Starfleet badge for highly rated content
      if ($avg_rating >= 4.0 && $config->get('starfleet_approval')) {
        $build['starfleet_badge'] = [
          '#theme' => 'hotlinks_starfleet_badge',
          '#rating' => $avg_rating,
          '#badge_type' => $avg_rating >= 4.5 ? 'exemplary' : 'approved',
          '#link_title' => Html::escape($entity->getTitle()),
          '#weight' => 2,
        ];
      }
      
      // Add interactive rating widget for authenticated users
      $current_user = \Drupal::currentUser();
      if ($current_user->hasPermission('rate hotlinks')) {
        $user_rating = hotlinks_reviews_get_user_rating($entity->id(), $current_user->id());
        
        $build['rating_widget'] = [
          '#theme' => 'hotlinks_rating_widget',
          '#rating' => $user_rating ?: 0,
          '#max_rating' => 5,
          '#name' => 'user_rating',
          '#star_trek_labels' => $config->get('use_star_trek_labels'),
          '#node_id' => $entity->id(),
          '#weight' => 4,
          '#attached' => [
            'library' => ['hotlinks_reviews/rating-widget'],
            'drupalSettings' => [
              'hotlinksReviews' => [
                'nodeId' => $entity->id(),
                'useStarTrekLabels' => $config->get('use_star_trek_labels'),
              ],
            ],
          ],
        ];
      }
    }

    $build['#attached']['library'][] = 'hotlinks_reviews/rating-display';
  }
}

/**
 * Update Starfleet approval status based on ratings.
 */
function _hotlinks_reviews_update_starfleet_status(EntityInterface $entity) {
  $avg_rating = $entity->get('field_hotlink_avg_rating')->value ?: 0;
  $config = \Drupal::config('hotlinks.settings');
  
  if ($config->get('starfleet_approval') && $avg_rating >= 4.0) {
    // Add to approved links list for potential featured display
    $approved_links = \Drupal::state()->get('hotlinks_reviews.starfleet_approved', []);
    $approved_links[$entity->id()] = [
      'rating' => $avg_rating,
      'title' => Html::escape($entity->getTitle()),
      'timestamp' => \Drupal::time()->getRequestTime(),
    ];
    \Drupal::state()->set('hotlinks_reviews.starfleet_approved', $approved_links);
  }
}

/**
 * Enhanced aggregate updates with better statistics and security.
 */
function _hotlinks_reviews_update_aggregates(EntityInterface $entity) {
  $rating_field = $entity->get('field_hotlink_rating');

  if (!$rating_field->isEmpty()) {
    $node_id = $entity->id();
    $ratings = \Drupal::state()->get('hotlinks_reviews.ratings', []);
    
    if (isset($ratings[$node_id])) {
      $total = 0;
      $count = 0;
      
      foreach ($ratings[$node_id] as $user_rating) {
        // Validate stored rating data
        if (isset($user_rating['rating']) && is_numeric($user_rating['rating'])) {
          $rating_value = (int) $user_rating['rating'];
          if ($rating_value >= 1 && $rating_value <= 5) {
            $total += $rating_value;
            $count++;
          }
        }
      }
      
      $new_avg = $count > 0 ? round($total / $count, 2) : 0;
      $entity->set('field_hotlink_avg_rating', $new_avg);
      $entity->set('field_hotlink_review_count', $count);
    }
  }
}

/**
 * Enhanced rating breakdown with additional statistics and validation.
 */
function _hotlinks_reviews_get_rating_breakdown($node_id) {
  $ratings = \Drupal::state()->get('hotlinks_reviews.ratings', []);
  $breakdown = [5 => 0, 4 => 0, 3 => 0, 2 => 0, 1 => 0];
  
  if (isset($ratings[$node_id])) {
    foreach ($ratings[$node_id] as $user_rating) {
      if (isset($user_rating['rating']) && is_numeric($user_rating['rating'])) {
        $rating = (int) $user_rating['rating'];
        if ($rating >= 1 && $rating <= 5) {
          $breakdown[$rating]++;
        }
      }
    }
  }
  
  return $breakdown;
}

/**
 * Get Star Trek themed rating labels.
 */
function hotlinks_reviews_get_star_trek_labels() {
  return [
    1 => t('Avoid - Hostile Territory'),
    2 => t('Caution - Proceed with Awareness'),
    3 => t('Serviceable - Standard Resource'),
    4 => t('Recommended - Valuable Asset'),
    5 => t('Essential - Starfleet Priority'),
  ];
}

/**
 * Integration with main Hotlinks controller for category displays.
 */
function hotlinks_reviews_hotlinks_category_alter(&$build, $category) {
  $config = \Drupal::config('hotlinks.settings');
  
  if ($config->get('starfleet_approval')) {
    // Add badge indicators to category listings
    $approved_links = \Drupal::state()->get('hotlinks_reviews.starfleet_approved', []);
    
    if (!empty($approved_links)) {
      $build['starfleet_notice'] = [
        '#markup' => '<p class="starfleet-notice">' . 
          t('🖖 @count resources in this category have received Starfleet approval.', [
            '@count' => count($approved_links)
          ]) . '</p>',
        '#weight' => -10,
      ];
    }
  }
}

/**
 * Helper function to check user rating permissions with Star Trek context and security.
 */
function hotlinks_reviews_user_can_rate($node_id, $user_id = NULL) {
  $user = $user_id ? \Drupal\user\Entity\User::load($user_id) : \Drupal::currentUser();
  $config = \Drupal::config('hotlinks.settings');

  if (!$user->hasPermission('rate hotlinks')) {
    return FALSE;
  }

  if ($user->isAnonymous() && !$config->get('allow_anonymous_reviews')) {
    return FALSE;
  }

  if (!$config->get('allow_review_updates') && hotlinks_reviews_get_user_rating($node_id, $user->id())) {
    return FALSE;
  }

  // Check rate limiting
  if (_hotlinks_reviews_is_rate_limited($user->id(), \Drupal::request()->getClientIp())) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Get user's existing rating with validation.
 */
function hotlinks_reviews_get_user_rating($node_id, $user_id) {
  $ratings = \Drupal::state()->get('hotlinks_reviews.ratings', []);
  
  if (isset($ratings[$node_id][$user_id]['rating'])) {
    $rating = $ratings[$node_id][$user_id]['rating'];
    // Validate the rating
    if (is_numeric($rating) && $rating >= 1 && $rating <= 5) {
      return (int) $rating;
    }
  }
  
  return NULL;
}

/**
 * Implements hook_cron().
 * Clean up old rate limiting data and other maintenance tasks.
 */
function hotlinks_reviews_cron() {
  // Clean up old rate limiting data (older than 24 hours)
  $rate_limit_data = \Drupal::state()->get('hotlinks_reviews.rate_limits', []);
  $current_time = time();
  $cleanup_threshold = 86400; // 24 hours
  
  foreach ($rate_limit_data as $key => $timestamps) {
    $rate_limit_data[$key] = array_filter($timestamps, function($timestamp) use ($current_time, $cleanup_threshold) {
      return ($current_time - $timestamp) < $cleanup_threshold;
    });
    
    // Remove empty entries
    if (empty($rate_limit_data[$key])) {
      unset($rate_limit_data[$key]);
    }
  }
  
  \Drupal::state()->set('hotlinks_reviews.rate_limits', $rate_limit_data);
  
  // Clean up old Starfleet approval data (older than 30 days)
  $approved_links = \Drupal::state()->get('hotlinks_reviews.starfleet_approved', []);
  $approval_threshold = 2592000; // 30 days
  
  foreach ($approved_links as $node_id => $data) {
    if (isset($data['timestamp']) && ($current_time - $data['timestamp']) > $approval_threshold) {
      // Check if the node still exists and still qualifies
      $node = \Drupal::entityTypeManager()->getStorage('node')->load($node_id);
      if (!$node || $node->bundle() !== 'hotlink') {
        unset($approved_links[$node_id]);
      } elseif ($node->hasField('field_hotlink_avg_rating')) {
        $avg_rating = $node->get('field_hotlink_avg_rating')->value ?: 0;
        if ($avg_rating < 4.0) {
          unset($approved_links[$node_id]);
        }
      }
    }
  }
  
  \Drupal::state()->set('hotlinks_reviews.starfleet_approved', $approved_links);
}