<?php

/**
 * @file
 * Contains hotlinks_reviews.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\Entity\Node;

/**
 * Implements hook_help().
 */
function hotlinks_reviews_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.hotlinks_reviews':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Hotlinks Reviews submodule adds rating and review functionality to hotlinks, allowing users to rate links from 1-5 stars and leave detailed reviews.') . '</p>';
      $output .= '<h3>' . t('Features') . '</h3>';
      $output .= '<ul>';
      $output .= '<li>' . t('5-star rating system with visual star display') . '</li>';
      $output .= '<li>' . t('Text reviews with moderation options') . '</li>';
      $output .= '<li>' . t('Average ratings calculated automatically') . '</li>';
      $output .= '<li>' . t('User permissions for rating and reviewing') . '</li>';
      $output .= '<li>' . t('Star Trek themed styling') . '</li>';
      $output .= '</ul>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function hotlinks_reviews_theme() {
  return [
    'hotlinks_rating_stars' => [
      'variables' => [
        'rating' => 0,
        'count' => 0,
        'max_rating' => 5,
        'compact' => FALSE,
        'interactive' => FALSE,
        'attributes' => [],
      ],
      'template' => 'hotlinks-rating-stars',
    ],
    'hotlinks_rating_widget' => [
      'variables' => [
        'rating' => 0,
        'max_rating' => 5,
        'name' => '',
      ],
      'template' => 'hotlinks-rating-widget',
    ],
    'hotlinks_review_summary' => [
      'variables' => [
        'average_rating' => 0,
        'total_reviews' => 0,
        'rating_breakdown' => [],
      ],
      'template' => 'hotlinks-review-summary',
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter() for hotlink forms.
 */
function hotlinks_reviews_form_node_hotlink_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  _hotlinks_reviews_alter_hotlink_form($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter() for hotlink edit forms.
 */
function hotlinks_reviews_form_node_hotlink_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  _hotlinks_reviews_alter_hotlink_form($form, $form_state);
}

/**
 * Helper function to alter hotlink forms.
 */
function _hotlinks_reviews_alter_hotlink_form(&$form, FormStateInterface $form_state) {
  $current_user = \Drupal::currentUser();
  $config = \Drupal::config('hotlinks.settings');
  
  // Check if user can rate/review
  if (!$current_user->hasPermission('rate hotlinks') && !$current_user->hasPermission('review hotlinks')) {
    // Hide rating and review fields for users without permission
    if (isset($form['field_hotlink_rating'])) {
      $form['field_hotlink_rating']['#access'] = FALSE;
    }
    if (isset($form['field_hotlink_review'])) {
      $form['field_hotlink_review']['#access'] = FALSE;
    }
    return;
  }

  // Add descriptions and help text
  if (isset($form['field_hotlink_rating'])) {
    $form['field_hotlink_rating']['widget']['#description'] = t('Rate this link from 1 (poor) to 5 (excellent) stars.');
  }

  if (isset($form['field_hotlink_review'])) {
    $form['field_hotlink_review']['widget']['#description'] = t('Share your thoughts about this link. What makes it useful or noteworthy?');
    
    if ($config->get('require_review_text')) {
      $form['field_hotlink_review']['widget'][0]['value']['#required'] = TRUE;
    }
  }

  // Add validation
  $form['#validate'][] = '_hotlinks_reviews_validate_review';

  // Attach CSS/JS
  $form['#attached']['library'][] = 'hotlinks_reviews/rating-widget';
}

/**
 * Custom validation for reviews.
 */
function _hotlinks_reviews_validate_review(&$form, FormStateInterface $form_state) {
  $config = \Drupal::config('hotlinks.settings');
  $rating = $form_state->getValue('field_hotlink_rating');
  $review = $form_state->getValue('field_hotlink_review');

  // If review text is required when rating
  if ($config->get('require_review_text') && !empty($rating[0]['value'])) {
    if (empty($review[0]['value'])) {
      $form_state->setErrorByName('field_hotlink_review', t('A review is required when you provide a rating.'));
    }
  }

  // Check minimum rating
  $min_rating = $config->get('min_rating_for_display') ?: 1;
  if (!empty($rating[0]['value']) && $rating[0]['value'] < $min_rating) {
    $form_state->setErrorByName('field_hotlink_rating', t('Rating must be at least @min stars.', ['@min' => $min_rating]));
  }
}

/**
 * Implements hook_entity_presave().
 */
function hotlinks_reviews_entity_presave(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'node' && $entity->bundle() == 'hotlink') {
    // Update average rating and review count
    _hotlinks_reviews_update_aggregates($entity);
  }
}

/**
 * Implements hook_node_view().
 */
function hotlinks_reviews_node_view(array &$build, EntityInterface $entity, $view_mode, $langcode) {
  if ($entity->getEntityTypeId() == 'node' && $entity->bundle() == 'hotlink') {
    // Add review summary for full view
    if ($view_mode == 'full') {
      $build['review_summary'] = [
        '#theme' => 'hotlinks_review_summary',
        '#average_rating' => $entity->get('field_hotlink_avg_rating')->value ?: 0,
        '#total_reviews' => $entity->get('field_hotlink_review_count')->value ?: 0,
        '#rating_breakdown' => _hotlinks_reviews_get_rating_breakdown($entity->id()),
        '#weight' => 3,
        '#cache' => [
          'tags' => ['node:' . $entity->id()],
        ],
      ];
    }

    // Attach CSS/JS
    $build['#attached']['library'][] = 'hotlinks_reviews/rating-display';
  }
}

/**
 * Helper function to update rating aggregates.
 */
function _hotlinks_reviews_update_aggregates(EntityInterface $entity) {
  // This is a simplified version - in a full implementation, you'd want to
  // track individual user ratings in a separate table to prevent duplicate ratings
  // and allow users to update their ratings
  
  $rating_field = $entity->get('field_hotlink_rating');
  $review_field = $entity->get('field_hotlink_review');

  if (!$rating_field->isEmpty()) {
    $current_rating = $rating_field->value;
    $current_avg = $entity->get('field_hotlink_avg_rating')->value ?: 0;
    $current_count = $entity->get('field_hotlink_review_count')->value ?: 0;

    // Simple aggregation - in production you'd want more sophisticated tracking
    if ($current_count == 0) {
      $new_avg = $current_rating;
      $new_count = 1;
    } else {
      $total = $current_avg * $current_count;
      $total += $current_rating;
      $new_count = $current_count + 1;
      $new_avg = $total / $new_count;
    }

    $entity->set('field_hotlink_avg_rating', round($new_avg, 2));
    $entity->set('field_hotlink_review_count', $new_count);
  }
}

/**
 * Helper function to get rating breakdown.
 */
function _hotlinks_reviews_get_rating_breakdown($node_id) {
  // This would query a separate ratings table in a full implementation
  // For now, return dummy data for theming
  return [
    5 => 12,
    4 => 8,
    3 => 3,
    2 => 1,
    1 => 0,
  ];
}

/**
 * Helper function to get user's rating for a node.
 */
function hotlinks_reviews_get_user_rating($node_id, $user_id) {
  // This would query a user_ratings table in a full implementation
  // For now, return NULL (no rating)
  return NULL;
}

/**
 * Helper function to check if user can rate a specific hotlink.
 */
function hotlinks_reviews_user_can_rate($node_id, $user_id = NULL) {
  $user = $user_id ? \Drupal\user\Entity\User::load($user_id) : \Drupal::currentUser();
  $config = \Drupal::config('hotlinks.settings');

  // Check basic permission
  if (!$user->hasPermission('rate hotlinks')) {
    return FALSE;
  }

  // Anonymous users
  if ($user->isAnonymous() && !$config->get('allow_anonymous_reviews')) {
    return FALSE;
  }

  // Check if user already rated (would check database in full implementation)
  if (!$config->get('allow_review_updates') && hotlinks_reviews_get_user_rating($node_id, $user->id())) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Debug function to test rating display.
 */
function hotlinks_reviews_debug_rating_display($node) {
  if (!$node || $node->bundle() !== 'hotlink') {
    return;
  }
  
  // Set some test data for debugging
  $node->set('field_hotlink_avg_rating', 4.5);
  $node->set('field_hotlink_review_count', 23);
  $node->save();
  
  \Drupal::messenger()->addMessage(t('Debug: Set test rating data for node @nid', ['@nid' => $node->id()]));
}