<?php

/**
 * @file
 * Install, update and uninstall functions for the Hotlinks Reviews submodule.
 */

use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;
use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\Core\Entity\Entity\EntityViewDisplay;

/**
 * Implements hook_install().
 */
function hotlinks_reviews_install() {
  // Ensure the main hotlinks module is fully installed first
  if (!\Drupal::moduleHandler()->moduleExists('hotlinks')) {
    \Drupal::messenger()->addError(t('Hotlinks module must be installed and enabled before installing Hotlinks Reviews.'));
    return;
  }

  // Check if hotlink content type exists
  $node_type = \Drupal::entityTypeManager()
    ->getStorage('node_type')
    ->load('hotlink');

  if (!$node_type) {
    \Drupal::messenger()->addError(t('Hotlinks content type not found. Please ensure the main Hotlinks module is properly installed.'));
    return;
  }

  // Create the rating field
  _hotlinks_reviews_create_rating_field();
  
  // Create the review field
  _hotlinks_reviews_create_review_field();
  
  // Create the average rating field
  _hotlinks_reviews_create_avg_rating_field();
  
  // Create the review count field
  _hotlinks_reviews_create_review_count_field();

  // Update displays
  _hotlinks_reviews_update_form_display();
  _hotlinks_reviews_update_view_displays();

  // Add configuration
  _hotlinks_reviews_add_config();

  \Drupal::messenger()->addMessage(t('Hotlinks Reviews installed successfully! You can now rate and review hotlinks.'));
}

/**
 * Create the rating field.
 */
function _hotlinks_reviews_create_rating_field() {
  // Check if field storage exists
  $field_storage = FieldStorageConfig::loadByName('node', 'field_hotlink_rating');
  if (!$field_storage) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => 'field_hotlink_rating',
      'entity_type' => 'node',
      'type' => 'integer',
      'cardinality' => 1,
      'settings' => [
        'min' => 1,
        'max' => 5,
      ],
    ]);
    $field_storage->save();
  }

  // Check if field config exists
  $field_config = FieldConfig::loadByName('node', 'hotlink', 'field_hotlink_rating');
  if (!$field_config) {
    $field_config = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => 'hotlink',
      'label' => 'Your Rating',
      'description' => 'Rate this link from 1 to 5 stars',
      'required' => FALSE,
      'settings' => [
        'min' => 1,
        'max' => 5,
      ],
    ]);
    $field_config->save();
  }
}

/**
 * Create the review field.
 */
function _hotlinks_reviews_create_review_field() {
  // Check if field storage exists
  $field_storage = FieldStorageConfig::loadByName('node', 'field_hotlink_review');
  if (!$field_storage) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => 'field_hotlink_review',
      'entity_type' => 'node',
      'type' => 'text_long',
      'cardinality' => 1,
    ]);
    $field_storage->save();
  }

  // Check if field config exists
  $field_config = FieldConfig::loadByName('node', 'hotlink', 'field_hotlink_review');
  if (!$field_config) {
    $field_config = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => 'hotlink',
      'label' => 'Your Review',
      'description' => 'Write a review of this link (optional)',
      'required' => FALSE,
    ]);
    $field_config->save();
  }
}

/**
 * Create the average rating field.
 */
function _hotlinks_reviews_create_avg_rating_field() {
  // Check if field storage exists
  $field_storage = FieldStorageConfig::loadByName('node', 'field_hotlink_avg_rating');
  if (!$field_storage) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => 'field_hotlink_avg_rating',
      'entity_type' => 'node',
      'type' => 'decimal',
      'cardinality' => 1,
      'settings' => [
        'precision' => 3,
        'scale' => 2,
      ],
    ]);
    $field_storage->save();
  }

  // Check if field config exists
  $field_config = FieldConfig::loadByName('node', 'hotlink', 'field_hotlink_avg_rating');
  if (!$field_config) {
    $field_config = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => 'hotlink',
      'label' => 'Average Rating',
      'description' => 'Average rating from all reviews',
      'required' => FALSE,
    ]);
    $field_config->save();
  }
}

/**
 * Create the review count field.
 */
function _hotlinks_reviews_create_review_count_field() {
  // Check if field storage exists
  $field_storage = FieldStorageConfig::loadByName('node', 'field_hotlink_review_count');
  if (!$field_storage) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => 'field_hotlink_review_count',
      'entity_type' => 'node',
      'type' => 'integer',
      'cardinality' => 1,
    ]);
    $field_storage->save();
  }

  // Check if field config exists
  $field_config = FieldConfig::loadByName('node', 'hotlink', 'field_hotlink_review_count');
  if (!$field_config) {
    $field_config = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => 'hotlink',
      'label' => 'Review Count',
      'description' => 'Total number of reviews',
      'required' => FALSE,
    ]);
    $field_config->save();
  }
}

/**
 * Update form display.
 */
function _hotlinks_reviews_update_form_display() {
  $form_display = EntityFormDisplay::load('node.hotlink.default');
  if ($form_display) {
    $form_display
      ->setComponent('field_hotlink_rating', [
        'type' => 'number',
        'weight' => 5,
        'settings' => [
          'placeholder' => 'Rate 1-5 stars',
          'min' => 1,
          'max' => 5,
        ],
      ])
      ->setComponent('field_hotlink_review', [
        'type' => 'text_textarea',
        'weight' => 6,
        'settings' => [
          'rows' => 4,
          'placeholder' => 'Share your thoughts about this link...',
        ],
      ])
      ->removeComponent('field_hotlink_avg_rating')
      ->removeComponent('field_hotlink_review_count')
      ->save();
  }
}

/**
 * Update view displays.
 */
function _hotlinks_reviews_update_view_displays() {
  // Update default view display
  $view_display = EntityViewDisplay::load('node.hotlink.default');
  if ($view_display) {
    $view_display
      ->setComponent('field_hotlink_avg_rating', [
        'type' => 'number_decimal',
        'label' => 'inline',
        'weight' => 1,
        'settings' => [
          'thousand_separator' => '',
          'decimal_separator' => '.',
          'scale' => 1,
          'prefix_suffix' => TRUE,
        ],
      ])
      ->setComponent('field_hotlink_rating', [
        'type' => 'number_integer',
        'label' => 'inline',
        'weight' => 2,
      ])
      ->setComponent('field_hotlink_review', [
        'type' => 'text_default',
        'label' => 'inline',
        'weight' => 5,
      ])
      ->setComponent('field_hotlink_review_count', [
        'type' => 'number_integer',
        'label' => 'inline',
        'weight' => 3,
      ])
      ->save();
  }

  // Update hotlinks_index view display
  $index_view_display = EntityViewDisplay::load('node.hotlink.hotlinks_index');
  if ($index_view_display) {
    $index_view_display
      ->setComponent('field_hotlink_avg_rating', [
        'type' => 'number_decimal',
        'label' => 'hidden',
        'weight' => 2,
        'settings' => [
          'thousand_separator' => '',
          'decimal_separator' => '.',
          'scale' => 1,
          'prefix_suffix' => TRUE,
        ],
      ])
      ->removeComponent('field_hotlink_rating')
      ->removeComponent('field_hotlink_review')
      ->removeComponent('field_hotlink_review_count')
      ->save();
  }
}

/**
 * Add module configuration.
 */
function _hotlinks_reviews_add_config() {
  $config = \Drupal::configFactory()->getEditable('hotlinks.settings');
  $config
    ->set('reviews_enabled', TRUE)
    ->set('allow_anonymous_reviews', FALSE)
    ->set('require_review_text', FALSE)
    ->set('moderate_reviews', TRUE)
    ->set('allow_review_updates', TRUE)
    ->set('show_reviewer_names', TRUE)
    ->set('min_rating_for_display', 1)
    ->set('use_star_trek_labels', FALSE)
    ->set('starfleet_approval', TRUE)
    ->save();
}

/**
 * Implements hook_uninstall().
 */
function hotlinks_reviews_uninstall() {
  // Delete all review-related data
  $fields_to_delete = [
    'field_hotlink_rating',
    'field_hotlink_review',
    'field_hotlink_avg_rating',
    'field_hotlink_review_count',
  ];

  foreach ($fields_to_delete as $field_name) {
    // Delete field config
    $field_config = FieldConfig::loadByName('node', 'hotlink', $field_name);
    if ($field_config) {
      $field_config->delete();
    }

    // Delete field storage
    $field_storage = FieldStorageConfig::loadByName('node', $field_name);
    if ($field_storage) {
      $field_storage->delete();
    }
  }

  // Remove review settings from main hotlinks configuration
  $config = \Drupal::configFactory()->getEditable('hotlinks.settings');
  $config
    ->clear('reviews_enabled')
    ->clear('allow_anonymous_reviews')
    ->clear('require_review_text')
    ->clear('moderate_reviews')
    ->clear('allow_review_updates')
    ->clear('show_reviewer_names')
    ->clear('min_rating_for_display')
    ->clear('use_star_trek_labels')
    ->clear('starfleet_approval')
    ->save();

  // Clear review data from state
  \Drupal::state()->delete('hotlinks_reviews.ratings');
  \Drupal::state()->delete('hotlinks_reviews.reviews');

  \Drupal::messenger()->addMessage(t('Hotlinks Reviews uninstalled. All rating and review data has been removed.'));
}

/**
 * Create missing fields if they don't exist.
 */
function hotlinks_reviews_update_8001() {
  $fields_created = [];
  
  // Check and create each field
  if (!FieldConfig::loadByName('node', 'hotlink', 'field_hotlink_rating')) {
    _hotlinks_reviews_create_rating_field();
    $fields_created[] = 'field_hotlink_rating';
  }
  
  if (!FieldConfig::loadByName('node', 'hotlink', 'field_hotlink_review')) {
    _hotlinks_reviews_create_review_field();
    $fields_created[] = 'field_hotlink_review';
  }
  
  if (!FieldConfig::loadByName('node', 'hotlink', 'field_hotlink_avg_rating')) {
    _hotlinks_reviews_create_avg_rating_field();
    $fields_created[] = 'field_hotlink_avg_rating';
  }
  
  if (!FieldConfig::loadByName('node', 'hotlink', 'field_hotlink_review_count')) {
    _hotlinks_reviews_create_review_count_field();
    $fields_created[] = 'field_hotlink_review_count';
  }

  if (!empty($fields_created)) {
    _hotlinks_reviews_update_form_display();
    _hotlinks_reviews_update_view_displays();
    _hotlinks_reviews_add_config();
    
    return t('Created missing review fields: @fields', [
      '@fields' => implode(', ', $fields_created)
    ]);
  }

  return t('All review fields already exist.');
}