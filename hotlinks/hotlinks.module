<?php

/**
 * @file
 * Contains hotlinks.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function hotlinks_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.hotlinks':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Hotlinks module provides a way to maintain a categorized index of useful links. It supports hierarchical categories and subcategories for better organization.') . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Creating hotlinks') . '</dt>';
      $output .= '<dd>' . t('Create new hotlinks by going to Content > Add content > Hotlink. Each hotlink requires a URL and at least one category.') . '</dd>';
      $output .= '<dt>' . t('Managing categories') . '</dt>';
      $output .= '<dd>' . t('Manage hotlink categories at Structure > Taxonomy > Hotlink Categories. You can create nested subcategories for better organization.') . '</dd>';
      $output .= '<dt>' . t('Viewing hotlinks') . '</dt>';
      $output .= '<dd>' . t('View all hotlinks organized by category at /hotlinks, or view specific categories at /hotlinks/category/[category-id].') . '</dd>';
      $output .= '<dt>' . t('Configuration') . '</dt>';
      $output .= '<dd>' . t('Configure display options at Configuration > Content authoring > Hotlinks.') . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for node_hotlink_form.
 */
function hotlinks_form_node_hotlink_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Improve the category field with better hierarchy display.
  if (isset($form['field_hotlink_category'])) {
    $form['field_hotlink_category']['widget']['#description'] = t('Select one or more categories. You can type to search categories.');
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for node_hotlink_edit_form.
 */
function hotlinks_form_node_hotlink_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  hotlinks_form_node_hotlink_form_alter($form, $form_state, $form_id);
}

/**
 * Implements hook_entity_presave().
 */
function hotlinks_entity_presave(EntityInterface $entity) {
  // Auto-generate title from URL if not provided.
  if ($entity->getEntityTypeId() == 'node' && $entity->bundle() == 'hotlink') {
    if (empty($entity->getTitle()) && !$entity->get('field_hotlink_url')->isEmpty()) {
      $url_field = $entity->get('field_hotlink_url')->first();
      if ($url_field && $url_field->title) {
        $entity->setTitle($url_field->title);
      } elseif ($url_field && $url_field->uri) {
        // Extract domain name as fallback title.
        $parsed_url = parse_url($url_field->uri);
        if (isset($parsed_url['host'])) {
          $domain = $parsed_url['host'];
          // Remove www. prefix if present.
          $domain = preg_replace('/^www\./', '', $domain);
          $entity->setTitle(ucfirst($domain));
        }
      }
    }
  }
}

/**
 * Helper function to get category hierarchy as formatted string.
 *
 * @param int $term_id
 *   The taxonomy term ID.
 *
 * @return string
 *   The formatted hierarchy string.
 */
function hotlinks_get_category_hierarchy($term_id) {
  $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $parents = $term_storage->loadAllParents($term_id);
  
  $hierarchy = [];
  foreach (array_reverse($parents, TRUE) as $parent) {
    $hierarchy[] = $parent->getName();
  }
  
  return implode(' > ', $hierarchy);
}

/**
 * Helper function to get all hotlinks count for a category including subcategories.
 *
 * @param int $category_id
 *   The category term ID.
 *
 * @return int
 *   The total count of hotlinks.
 */
function hotlinks_get_category_total_count($category_id) {
  $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  
  // Get all child term IDs.
  $child_terms = $term_storage->loadTree('hotlink_categories', $category_id);
  $category_ids = [$category_id];
  
  foreach ($child_terms as $child_term) {
    $category_ids[] = $child_term->tid;
  }

  $query = $node_storage->getQuery()
    ->condition('type', 'hotlink')
    ->condition('status', 1)
    ->condition('field_hotlink_category', $category_ids, 'IN')
    ->accessCheck(TRUE);

  return $query->count()->execute();
}