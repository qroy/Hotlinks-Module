<?php

/**
 * @file
 * Install, update and uninstall functions for the Hotlinks module.
 */

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\taxonomy\Entity\Term;
use Drupal\node\Entity\NodeType;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;
use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Core\Entity\Entity\EntityViewMode;

/**
 * Implements hook_install().
 */
function hotlinks_install() {
  // Set module weight early to ensure proper installation order
  module_set_weight('hotlinks', -10);
  
  // Clear caches to ensure all entity definitions are fresh
  \Drupal::entityTypeManager()->clearCachedDefinitions();
  \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();

  try {
    // Install in proper order with error checking
    _hotlinks_create_vocabulary();
    _hotlinks_create_content_type();
    _hotlinks_create_fields();
    _hotlinks_create_view_mode();
    _hotlinks_configure_displays();
    _hotlinks_set_default_config();

    // Final cache clear
    \Drupal::entityTypeManager()->clearCachedDefinitions();
    \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();
    \Drupal::service('entity_display.repository')->clearDisplayModeInfo();

    \Drupal::messenger()->addMessage(t('Hotlinks module installed successfully! You can now create categories and add hotlinks.'));

  } catch (\Exception $e) {
    \Drupal::logger('hotlinks')->error('Error during installation: @message', ['@message' => $e->getMessage()]);
    throw $e;
  }
}

/**
 * Create the hotlink categories vocabulary.
 */
function _hotlinks_create_vocabulary() {
  // Check if vocabulary already exists
  $vocabulary = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_vocabulary')
    ->load('hotlink_categories');

  if (!$vocabulary) {
    $vocabulary = Vocabulary::create([
      'vid' => 'hotlink_categories',
      'name' => 'Hotlink Categories',
      'description' => 'Categories for organizing hotlinks',
      'hierarchy' => 1,
    ]);
    $vocabulary->save();
    \Drupal::logger('hotlinks')->info('Created hotlink_categories vocabulary');
  } else {
    \Drupal::logger('hotlinks')->info('Hotlink categories vocabulary already exists');
  }
}

/**
 * Create the hotlink content type.
 */
function _hotlinks_create_content_type() {
  // Check if content type already exists
  $node_type = \Drupal::entityTypeManager()
    ->getStorage('node_type')
    ->load('hotlink');

  if (!$node_type) {
    $node_type = NodeType::create([
      'type' => 'hotlink',
      'name' => 'Hotlink',
      'description' => 'A categorized link with description',
      'help' => 'Use this content type to add links to your hotlinks index.',
      'new_revision' => TRUE,
      'preview_mode' => DRUPAL_OPTIONAL,
      'display_submitted' => FALSE,
    ]);
    $node_type->save();
    \Drupal::logger('hotlinks')->info('Created hotlink content type');
  } else {
    \Drupal::logger('hotlinks')->info('Hotlink content type already exists');
  }
}

/**
 * Create all required fields for the hotlink content type.
 */
function _hotlinks_create_fields() {
  // Create fields in order of dependency
  _hotlinks_create_url_field();
  _hotlinks_create_category_field();
  _hotlinks_create_description_field();
  _hotlinks_create_thumbnail_field();
}

/**
 * Create URL field.
 */
function _hotlinks_create_url_field() {
  // Check if field storage exists
  $field_storage = FieldStorageConfig::loadByName('node', 'field_hotlink_url');
  if (!$field_storage) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => 'field_hotlink_url',
      'entity_type' => 'node',
      'type' => 'link',
      'cardinality' => 1,
    ]);
    $field_storage->save();
    \Drupal::logger('hotlinks')->info('Created field_hotlink_url storage');
  }

  // Check if field config exists
  $field_config = FieldConfig::loadByName('node', 'hotlink', 'field_hotlink_url');
  if (!$field_config) {
    $field_config = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => 'hotlink',
      'label' => 'URL',
      'description' => 'The link URL',
      'required' => TRUE,
      'settings' => [
        'link_type' => 16, // External links only
        'title' => 1, // Optional title
      ],
    ]);
    $field_config->save();
    \Drupal::logger('hotlinks')->info('Created field_hotlink_url config');
  }
}

/**
 * Create category field.
 */
function _hotlinks_create_category_field() {
  // Verify vocabulary exists first
  $vocabulary = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_vocabulary')
    ->load('hotlink_categories');
  
  if (!$vocabulary) {
    throw new \Exception('Hotlink categories vocabulary not found. Cannot create category field.');
  }

  // Check if field storage exists
  $field_storage = FieldStorageConfig::loadByName('node', 'field_hotlink_category');
  if (!$field_storage) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => 'field_hotlink_category',
      'entity_type' => 'node',
      'type' => 'entity_reference',
      'cardinality' => -1, // Multiple values
      'settings' => [
        'target_type' => 'taxonomy_term',
      ],
    ]);
    $field_storage->save();
    \Drupal::logger('hotlinks')->info('Created field_hotlink_category storage');
  }

  // Check if field config exists
  $field_config = FieldConfig::loadByName('node', 'hotlink', 'field_hotlink_category');
  if (!$field_config) {
    $field_config = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => 'hotlink',
      'label' => 'Categories',
      'description' => 'Select one or more categories for this link',
      'required' => TRUE,
      'settings' => [
        'handler' => 'default:taxonomy_term',
        'handler_settings' => [
          'target_bundles' => [
            'hotlink_categories' => 'hotlink_categories',
          ],
          'auto_create' => FALSE,
        ],
      ],
    ]);
    $field_config->save();
    \Drupal::logger('hotlinks')->info('Created field_hotlink_category config');
  }
}

/**
 * Create description field.
 */
function _hotlinks_create_description_field() {
  // Check if field storage exists
  $field_storage = FieldStorageConfig::loadByName('node', 'field_hotlink_description');
  if (!$field_storage) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => 'field_hotlink_description',
      'entity_type' => 'node',
      'type' => 'text_long',
      'cardinality' => 1,
    ]);
    $field_storage->save();
    \Drupal::logger('hotlinks')->info('Created field_hotlink_description storage');
  }

  // Check if field config exists
  $field_config = FieldConfig::loadByName('node', 'hotlink', 'field_hotlink_description');
  if (!$field_config) {
    $field_config = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => 'hotlink',
      'label' => 'Description',
      'description' => 'Brief description of the link',
      'required' => FALSE,
    ]);
    $field_config->save();
    \Drupal::logger('hotlinks')->info('Created field_hotlink_description config');
  }
}

/**
 * Create thumbnail field.
 */
function _hotlinks_create_thumbnail_field() {
  // Check if field storage exists
  $field_storage = FieldStorageConfig::loadByName('node', 'field_hotlink_thumbnail');
  if (!$field_storage) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => 'field_hotlink_thumbnail',
      'entity_type' => 'node',
      'type' => 'image',
      'cardinality' => 1,
      'settings' => [
        'default_image' => [
          'uuid' => '',
          'alt' => '',
          'title' => '',
          'width' => '',
          'height' => '',
        ],
        'target_type' => 'file',
        'display_field' => FALSE,
        'display_default' => FALSE,
        'uri_scheme' => 'public',
      ],
    ]);
    $field_storage->save();
    \Drupal::logger('hotlinks')->info('Created field_hotlink_thumbnail storage');
  }

  // Check if field config exists
  $field_config = FieldConfig::loadByName('node', 'hotlink', 'field_hotlink_thumbnail');
  if (!$field_config) {
    $field_config = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => 'hotlink',
      'label' => 'Thumbnail',
      'description' => 'Upload a thumbnail image for this link (optional)',
      'required' => FALSE,
      'settings' => [
        'file_directory' => 'hotlinks/thumbnails',
        'file_extensions' => 'png gif jpg jpeg',
        'max_filesize' => '2 MB',
        'max_resolution' => '800x600',
        'min_resolution' => '50x50',
        'alt_field' => TRUE,
        'alt_field_required' => FALSE,
        'title_field' => FALSE,
        'title_field_required' => FALSE,
        'default_image' => [
          'uuid' => '',
          'alt' => '',
          'title' => '',
          'width' => '',
          'height' => '',
        ],
      ],
    ]);
    $field_config->save();
    \Drupal::logger('hotlinks')->info('Created field_hotlink_thumbnail config');
  }
}

/**
 * Create the hotlinks_index view mode.
 */
function _hotlinks_create_view_mode() {
  // Check if view mode already exists
  $view_mode = \Drupal::entityTypeManager()
    ->getStorage('entity_view_mode')
    ->load('node.hotlinks_index');
    
  if (!$view_mode) {
    $view_mode = EntityViewMode::create([
      'id' => 'node.hotlinks_index',
      'label' => 'Hotlinks Index',
      'targetEntityType' => 'node',
      'status' => TRUE,
      'enabled' => TRUE,
    ]);
    $view_mode->save();
    \Drupal::logger('hotlinks')->info('Created hotlinks_index view mode');
  } else {
    // Ensure it's enabled
    $view_mode->setStatus(TRUE);
    $view_mode->save();
    \Drupal::logger('hotlinks')->info('Hotlinks_index view mode already exists and is enabled');
  }
}

/**
 * Configure form and view displays.
 */
function _hotlinks_configure_displays() {
  // Configure form display
  _hotlinks_configure_form_display();
  
  // Configure default view display
  _hotlinks_configure_default_view_display();
  
  // Configure hotlinks_index view display
  _hotlinks_configure_index_view_display();
}

/**
 * Configure form display.
 */
function _hotlinks_configure_form_display() {
  $form_display = EntityFormDisplay::load('node.hotlink.default');
  if (!$form_display) {
    $form_display = EntityFormDisplay::create([
      'targetEntityType' => 'node',
      'bundle' => 'hotlink',
      'mode' => 'default',
      'status' => TRUE,
    ]);
  }

  $form_display
    ->setComponent('title', [
      'type' => 'string_textfield',
      'weight' => 0,
      'settings' => [
        'size' => 60,
        'placeholder' => 'Leave empty to auto-generate from URL',
      ],
    ])
    ->setComponent('field_hotlink_url', [
      'type' => 'link_default',
      'weight' => 1,
      'settings' => [
        'placeholder_url' => 'https://example.com',
        'placeholder_title' => 'Optional link title',
      ],
    ])
    ->setComponent('field_hotlink_category', [
      'type' => 'entity_reference_autocomplete_tags',
      'weight' => 2,
      'settings' => [
        'match_operator' => 'CONTAINS',
        'size' => 60,
        'placeholder' => 'Start typing to find categories...',
      ],
    ])
    ->setComponent('field_hotlink_description', [
      'type' => 'text_textarea',
      'weight' => 3,
      'settings' => [
        'rows' => 4,
        'placeholder' => 'Optional description of the link',
      ],
    ])
    ->setComponent('field_hotlink_thumbnail', [
      'type' => 'image_image',
      'weight' => 4,
      'settings' => [
        'progress_indicator' => 'throbber',
        'preview_image_style' => 'thumbnail',
      ],
    ])
    ->removeComponent('body')
    ->removeComponent('uid')
    ->removeComponent('created')
    ->removeComponent('promote')
    ->removeComponent('sticky')
    ->save();

  \Drupal::logger('hotlinks')->info('Configured form display');
}

/**
 * Configure default view display.
 */
function _hotlinks_configure_default_view_display() {
  $view_display = EntityViewDisplay::load('node.hotlink.default');
  if (!$view_display) {
    $view_display = EntityViewDisplay::create([
      'targetEntityType' => 'node',
      'bundle' => 'hotlink',
      'mode' => 'default',
      'status' => TRUE,
    ]);
  }

  $view_display
    ->setComponent('field_hotlink_thumbnail', [
      'type' => 'image',
      'label' => 'hidden',
      'weight' => 0,
      'settings' => [
        'image_style' => 'large',
        'image_link' => '',
      ],
    ])
    ->setComponent('field_hotlink_url', [
      'type' => 'link',
      'label' => 'hidden',
      'weight' => 1,
      'settings' => [
        'trim_length' => 80,
        'url_only' => FALSE,
        'url_plain' => FALSE,
        'rel' => 'noopener noreferrer',
        'target' => '_blank',
      ],
    ])
    ->setComponent('field_hotlink_category', [
      'type' => 'entity_reference_label',
      'label' => 'inline',
      'weight' => 2,
      'settings' => [
        'link' => TRUE,
      ],
    ])
    ->setComponent('field_hotlink_description', [
      'type' => 'text_default',
      'label' => 'hidden',
      'weight' => 3,
    ])
    ->removeComponent('body')
    ->removeComponent('links')
    ->save();

  \Drupal::logger('hotlinks')->info('Configured default view display');
}

/**
 * Configure hotlinks_index view display.
 */
function _hotlinks_configure_index_view_display() {
  // First verify the view mode exists
  $view_mode = \Drupal::entityTypeManager()
    ->getStorage('entity_view_mode')
    ->load('node.hotlinks_index');
    
  if (!$view_mode) {
    throw new \Exception('Hotlinks_index view mode not found. Cannot configure display.');
  }

  $index_view_display = EntityViewDisplay::load('node.hotlink.hotlinks_index');
  if (!$index_view_display) {
    $index_view_display = EntityViewDisplay::create([
      'targetEntityType' => 'node',
      'bundle' => 'hotlink',
      'mode' => 'hotlinks_index',
      'status' => TRUE,
    ]);
  }

  $index_view_display
    ->setComponent('title', [
      'type' => 'string',
      'label' => 'hidden',
      'weight' => 0,
      'settings' => [
        'link_to_entity' => TRUE,
      ],
    ])
    ->setComponent('field_hotlink_thumbnail', [
      'type' => 'image',
      'label' => 'hidden',
      'weight' => 1,
      'settings' => [
        'image_style' => 'thumbnail',
        'image_link' => 'content',
      ],
    ])
    ->setComponent('field_hotlink_url', [
      'type' => 'link',
      'label' => 'hidden',
      'weight' => 2,
      'settings' => [
        'trim_length' => 80,
        'url_only' => FALSE,
        'url_plain' => FALSE,
        'rel' => 'noopener noreferrer',
        'target' => '_blank',
      ],
    ])
    ->setComponent('field_hotlink_category', [
      'type' => 'entity_reference_label',
      'label' => 'inline',
      'weight' => 3,
      'settings' => [
        'link' => TRUE,
      ],
    ])
    ->setComponent('field_hotlink_description', [
      'type' => 'text_default',
      'label' => 'hidden',
      'weight' => 4,
    ])
    ->removeComponent('body')
    ->removeComponent('links')
    ->save();

  \Drupal::logger('hotlinks')->info('Configured hotlinks_index view display');
}

/**
 * Set default configuration.
 */
function _hotlinks_set_default_config() {
  $config = \Drupal::configFactory()->getEditable('hotlinks.settings');
  
  // Only set values if they don't already exist
  if ($config->get('show_descriptions') === NULL) {
    $config->set('show_descriptions', TRUE);
  }
  if ($config->get('open_in_new_window') === NULL) {
    $config->set('open_in_new_window', TRUE);
  }
  if ($config->get('show_category_counts') === NULL) {
    $config->set('show_category_counts', TRUE);
  }
  if ($config->get('auto_thumbnail_service') === NULL) {
    $config->set('auto_thumbnail_service', 'thum_io');
  }
  if ($config->get('screenshotapi_key') === NULL) {
    $config->set('screenshotapi_key', '');
  }
  if ($config->get('htmlcsstoimage_key') === NULL) {
    $config->set('htmlcsstoimage_key', '');
  }
  
  $config->save();
  \Drupal::logger('hotlinks')->info('Set default configuration');
}

/**
 * Implements hook_uninstall().
 */
function hotlinks_uninstall() {
  // Delete all hotlink nodes
  $nids = \Drupal::entityQuery('node')
    ->condition('type', 'hotlink')
    ->accessCheck(FALSE)
    ->execute();
  
  if (!empty($nids)) {
    $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($nids);
    foreach ($nodes as $node) {
      $node->delete();
    }
    \Drupal::logger('hotlinks')->info('Deleted @count hotlink nodes', ['@count' => count($nodes)]);
  }

  // Delete the content type
  $node_type = \Drupal::entityTypeManager()->getStorage('node_type')->load('hotlink');
  if ($node_type) {
    $node_type->delete();
    \Drupal::logger('hotlinks')->info('Deleted hotlink content type');
  }

  // Delete the view mode
  $view_mode = \Drupal::entityTypeManager()->getStorage('entity_view_mode')->load('node.hotlinks_index');
  if ($view_mode) {
    $view_mode->delete();
    \Drupal::logger('hotlinks')->info('Deleted hotlinks_index view mode');
  }

  // Delete the vocabulary and its terms
  $vocabulary = \Drupal::entityTypeManager()->getStorage('taxonomy_vocabulary')->load('hotlink_categories');
  if ($vocabulary) {
    $vocabulary->delete();
    \Drupal::logger('hotlinks')->info('Deleted hotlink_categories vocabulary');
  }

  // Delete configuration
  \Drupal::configFactory()->getEditable('hotlinks.settings')->delete();
  \Drupal::logger('hotlinks')->info('Deleted hotlinks configuration');
}

/**
 * Remove basic categories (cleanup for existing installations).
 */
function hotlinks_update_8002() {
  // Delete any existing basic categories if they exist
  $basic_categories_to_remove = ['Technology', 'Reference', 'Entertainment', 'News & Media'];
  
  $deleted_count = 0;
  foreach ($basic_categories_to_remove as $category_name) {
    $existing_terms = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadByProperties([
        'vid' => 'hotlink_categories',
        'name' => $category_name,
      ]);
    
    foreach ($existing_terms as $term) {
      // Get children first
      $children = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->loadChildren($term->id());
      
      // Delete children
      foreach ($children as $child) {
        $child->delete();
        $deleted_count++;
      }
      
      // Delete parent
      $term->delete();
      $deleted_count++;
    }
  }

  if ($deleted_count > 0) {
    return t('Removed @count basic example categories. You can now create your own categories or enable the Star Trek Categories submodule.', ['@count' => $deleted_count]);
  } else {
    return t('No basic categories found to remove. Module updated successfully.');
  }
}

/**
 * Add thumbnail field to hotlinks.
 */
function hotlinks_update_8003() {
  // Use the centralized field creation function
  try {
    _hotlinks_create_thumbnail_field();
    
    // Update form display
    _hotlinks_configure_form_display();
    
    // Update view displays
    _hotlinks_configure_default_view_display();
    _hotlinks_configure_index_view_display();
    
    return t('Thumbnail field added to hotlinks.');
  } catch (\Exception $e) {
    \Drupal::logger('hotlinks')->error('Error adding thumbnail field: @message', ['@message' => $e->getMessage()]);
    return t('Error adding thumbnail field. Check logs for details.');
  }
}

/**
 * Create custom display mode for hotlinks.
 */
function hotlinks_update_8004() {
  try {
    _hotlinks_create_view_mode();
    _hotlinks_configure_index_view_display();
    
    return t('Created "Hotlinks Index" display mode for hotlinks.');
  } catch (\Exception $e) {
    \Drupal::logger('hotlinks')->error('Error creating view mode: @message', ['@message' => $e->getMessage()]);
    return t('Error creating view mode. Check logs for details.');
  }
}

/**
 * Ensure hotlinks_index view mode is properly enabled.
 */
function hotlinks_update_8005() {
  try {
    _hotlinks_create_view_mode();
    
    // Clear entity display repository cache
    \Drupal::service('entity_display.repository')->clearDisplayModeInfo();
    \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();

    return t('Ensured hotlinks_index view mode is enabled.');
  } catch (\Exception $e) {
    \Drupal::logger('hotlinks')->error('Error enabling view mode: @message', ['@message' => $e->getMessage()]);
    return t('Error enabling view mode. Check logs for details.');
  }
}

/**
 * Set module weight to ensure proper installation order.
 */
function hotlinks_update_8006() {
  // Set module weight to ensure this module installs before submodules
  module_set_weight('hotlinks', -10);
  return t('Set module weight to ensure proper installation order.');
}

/**
 * Ensure vocabulary exists and fix any issues.
 */
function hotlinks_update_8007() {
  try {
    _hotlinks_create_vocabulary();
    return t('Hotlink Categories vocabulary exists and is properly configured.');
  } catch (\Exception $e) {
    \Drupal::logger('hotlinks')->error('Error ensuring vocabulary: @message', ['@message' => $e->getMessage()]);
    return t('Error ensuring vocabulary exists. Check logs for details.');
  }
}

/**
 * Fix installation process and field dependencies.
 */
function hotlinks_update_8008() {
  try {
    // Ensure all components exist in proper order
    _hotlinks_create_vocabulary();
    _hotlinks_create_content_type();
    _hotlinks_create_fields();
    _hotlinks_create_view_mode();
    _hotlinks_configure_displays();
    
    // Clear all caches
    \Drupal::entityTypeManager()->clearCachedDefinitions();
    \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();
    \Drupal::service('entity_display.repository')->clearDisplayModeInfo();
    
    return t('Fixed installation process and verified all components exist.');
  } catch (\Exception $e) {
    \Drupal::logger('hotlinks')->error('Error fixing installation: @message', ['@message' => $e->getMessage()]);
    return t('Error fixing installation. Check logs for details: @error', ['@error' => $e->getMessage()]);
  }
}