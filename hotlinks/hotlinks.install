<?php

/**
 * @file
 * Install, update and uninstall functions for the Hotlinks module.
 */

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\taxonomy\Entity\Term;
use Drupal\node\Entity\NodeType;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;
use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Core\Entity\Entity\EntityViewMode;

/**
 * Implements hook_install().
 */
function hotlinks_install() {
  // Set module weight early to ensure proper installation order
  module_set_weight('hotlinks', -10);
  
  // Clear caches to ensure all entity definitions are fresh
  \Drupal::entityTypeManager()->clearCachedDefinitions();
  \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();

  try {
    // Install in proper order with error checking
    _hotlinks_create_vocabulary();
    _hotlinks_create_content_type();
    _hotlinks_create_fields();
    _hotlinks_create_view_mode();
    _hotlinks_configure_displays();
    _hotlinks_set_default_config();

    // Final cache clear
    \Drupal::entityTypeManager()->clearCachedDefinitions();
    \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();
    \Drupal::service('entity_display.repository')->clearDisplayModeInfo();

    \Drupal::messenger()->addMessage(t('Hotlinks module installed successfully! You can now create categories and add hotlinks.'));

    // Add message about test data availability
    \Drupal::messenger()->addMessage(t('You can generate test data for development and demonstration purposes by visiting the <a href="@url">Test Data Management</a> page.', [
      '@url' => '/admin/config/content/hotlinks/test-data',
    ]));

  } catch (\Exception $e) {
    \Drupal::logger('hotlinks')->error('Error during installation: @message', ['@message' => $e->getMessage()]);
    throw $e;
  }
}

/**
 * Create the hotlink categories vocabulary.
 */
function _hotlinks_create_vocabulary() {
  // Check if vocabulary already exists
  $vocabulary = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_vocabulary')
    ->load('hotlink_categories');

  if (!$vocabulary) {
    $vocabulary = Vocabulary::create([
      'vid' => 'hotlink_categories',
      'name' => 'Hotlink Categories',
      'description' => 'Categories for organizing hotlinks',
      'hierarchy' => 1,
    ]);
    $vocabulary->save();
    \Drupal::logger('hotlinks')->info('Created hotlink_categories vocabulary');
  } else {
    \Drupal::logger('hotlinks')->info('Hotlink categories vocabulary already exists');
  }
}

/**
 * Create the hotlink content type.
 */
function _hotlinks_create_content_type() {
  // Check if content type already exists
  $node_type = \Drupal::entityTypeManager()
    ->getStorage('node_type')
    ->load('hotlink');

  if (!$node_type) {
    $node_type = NodeType::create([
      'type' => 'hotlink',
      'name' => 'Hotlink',
      'description' => 'A categorized link with description',
      'help' => 'Use this content type to add links to your hotlinks index.',
      'new_revision' => TRUE,
      'preview_mode' => DRUPAL_OPTIONAL,
      'display_submitted' => FALSE,
    ]);
    $node_type->save();
    \Drupal::logger('hotlinks')->info('Created hotlink content type');
  } else {
    \Drupal::logger('hotlinks')->info('Hotlink content type already exists');
  }
}

/**
 * Create all required fields for the hotlink content type.
 */
function _hotlinks_create_fields() {
  // Create fields in order of dependency
  _hotlinks_create_url_field();
  _hotlinks_create_category_field();
  _hotlinks_create_description_field();
  _hotlinks_create_thumbnail_field();
}

/**
 * Create URL field.
 */
function _hotlinks_create_url_field() {
  // Check if field storage exists
  $field_storage = FieldStorageConfig::loadByName('node', 'field_hotlink_url');
  if (!$field_storage) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => 'field_hotlink_url',
      'entity_type' => 'node',
      'type' => 'link',
      'cardinality' => 1,
    ]);
    $field_storage->save();
    \Drupal::logger('hotlinks')->info('Created field_hotlink_url storage');
  }

  // Check if field config exists
  $field_config = FieldConfig::loadByName('node', 'hotlink', 'field_hotlink_url');
  if (!$field_config) {
    $field_config = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => 'hotlink',
      'label' => 'URL',
      'description' => 'The link URL',
      'required' => TRUE,
      'settings' => [
        'link_type' => 16, // External links only
        'title' => 1, // Optional title
      ],
    ]);
    $field_config->save();
    \Drupal::logger('hotlinks')->info('Created field_hotlink_url config');
  }
}

/**
 * Create category field.
 */
function _hotlinks_create_category_field() {
  // Verify vocabulary exists first
  $vocabulary = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_vocabulary')
    ->load('hotlink_categories');
  
  if (!$vocabulary) {
    throw new \Exception('Hotlink categories vocabulary not found. Cannot create category field.');
  }

  // Check if field storage exists
  $field_storage = FieldStorageConfig::loadByName('node', 'field_hotlink_category');
  if (!$field_storage) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => 'field_hotlink_category',
      'entity_type' => 'node',
      'type' => 'entity_reference',
      'cardinality' => -1, // Multiple values
      'settings' => [
        'target_type' => 'taxonomy_term',
      ],
    ]);
    $field_storage->save();
    \Drupal::logger('hotlinks')->info('Created field_hotlink_category storage');
  }

  // Check if field config exists
  $field_config = FieldConfig::loadByName('node', 'hotlink', 'field_hotlink_category');
  if (!$field_config) {
    $field_config = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => 'hotlink',
      'label' => 'Categories',
      'description' => 'Select one or more categories for this link',
      'required' => TRUE,
      'settings' => [
        'handler' => 'default:taxonomy_term',
        'handler_settings' => [
          'target_bundles' => [
            'hotlink_categories' => 'hotlink_categories',
          ],
          'auto_create' => FALSE,
        ],
      ],
    ]);
    $field_config->save();
    \Drupal::logger('hotlinks')->info('Created field_hotlink_category config');
  }
}

/**
 * Create description field.
 */
function _hotlinks_create_description_field() {
  // Check if field storage exists
  $field_storage = FieldStorageConfig::loadByName('node', 'field_hotlink_description');
  if (!$field_storage) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => 'field_hotlink_description',
      'entity_type' => 'node',
      'type' => 'text_long',
      'cardinality' => 1,
    ]);
    $field_storage->save();
    \Drupal::logger('hotlinks')->info('Created field_hotlink_description storage');
  }

  // Check if field config exists
  $field_config = FieldConfig::loadByName('node', 'hotlink', 'field_hotlink_description');
  if (!$field_config) {
    $field_config = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => 'hotlink',
      'label' => 'Description',
      'description' => 'Brief description of the link',
      'required' => FALSE,
    ]);
    $field_config->save();
    \Drupal::logger('hotlinks')->info('Created field_hotlink_description config');
  }
}

/**
 * Create thumbnail field.
 */
function _hotlinks_create_thumbnail_field() {
  // Check if field storage exists
  $field_storage = FieldStorageConfig::loadByName('node', 'field_hotlink_thumbnail');
  if (!$field_storage) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => 'field_hotlink_thumbnail',
      'entity_type' => 'node',
      'type' => 'image',
      'cardinality' => 1,
      'settings' => [
        'default_image' => [
          'uuid' => '',
          'alt' => '',
          'title' => '',
          'width' => '',
          'height' => '',
        ],
        'target_type' => 'file',
        'display_field' => FALSE,
        'display_default' => FALSE,
        'uri_scheme' => 'public',
      ],
    ]);
    $field_storage->save();
    \Drupal::logger('hotlinks')->info('Created field_hotlink_thumbnail storage');
  }

  // Check if field config exists
  $field_config = FieldConfig::loadByName('node', 'hotlink', 'field_hotlink_thumbnail');
  if (!$field_config) {
    $field_config = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => 'hotlink',
      'label' => 'Thumbnail',
      'description' => 'Upload a thumbnail image for this link (optional)',
      'required' => FALSE,
      'settings' => [
        'file_directory' => 'hotlinks/thumbnails',
        'file_extensions' => 'png gif jpg jpeg',
        'max_filesize' => '2 MB',
        'max_resolution' => '800x600',
        'min_resolution' => '50x50',
        'alt_field' => TRUE,
        'alt_field_required' => FALSE,
        'title_field' => FALSE,
        'title_field_required' => FALSE,
        'default_image' => [
          'uuid' => '',
          'alt' => '',
          'title' => '',
          'width' => '',
          'height' => '',
        ],
      ],
    ]);
    $field_config->save();
    \Drupal::logger('hotlinks')->info('Created field_hotlink_thumbnail config');
  }
}

/**
 * Create the hotlinks_index view mode.
 */
function _hotlinks_create_view_mode() {
  // Check if view mode already exists
  $view_mode = \Drupal::entityTypeManager()
    ->getStorage('entity_view_mode')
    ->load('node.hotlinks_index');
    
  if (!$view_mode) {
    $view_mode = EntityViewMode::create([
      'id' => 'node.hotlinks_index',
      'label' => 'Hotlinks Index',
      'targetEntityType' => 'node',
      'status' => TRUE,
      'enabled' => TRUE,
    ]);
    $view_mode->save();
    \Drupal::logger('hotlinks')->info('Created hotlinks_index view mode');
  } else {
    // Ensure it's enabled
    $view_mode->setStatus(TRUE);
    $view_mode->save();
    \Drupal::logger('hotlinks')->info('Hotlinks_index view mode already exists and is enabled');
  }
}

/**
 * Configure form and view displays.
 */
function _hotlinks_configure_displays() {
  // Configure form display
  _hotlinks_configure_form_display();
  
  // Configure default view display
  _hotlinks_configure_default_view_display();
  
  // Configure hotlinks_index view display
  _hotlinks_configure_index_view_display();
}

/**
 * Configure form display.
 */
function _hotlinks_configure_form_display() {
  $form_display = EntityFormDisplay::load('node.hotlink.default');
  if (!$form_display) {
    $form_display = EntityFormDisplay::create([
      'targetEntityType' => 'node',
      'bundle' => 'hotlink',
      'mode' => 'default',
      'status' => TRUE,
    ]);
  }

  $form_display
    ->setComponent('title', [
      'type' => 'string_textfield',
      'weight' => 0,
      'settings' => [
        'size' => 60,
        'placeholder' => 'Leave empty to auto-generate from URL',
      ],
    ])
    ->setComponent('field_hotlink_url', [
      'type' => 'link_default',
      'weight' => 1,
      'settings' => [
        'placeholder_url' => 'https://example.com',
        'placeholder_title' => 'Optional link title',
      ],
    ])
    ->setComponent('field_hotlink_category', [
      'type' => 'entity_reference_autocomplete_tags',
      'weight' => 2,
      'settings' => [
        'match_operator' => 'CONTAINS',
        'size' => 60,
        'placeholder' => 'Start typing to find categories...',
      ],
    ])
    ->setComponent('field_hotlink_description', [
      'type' => 'text_textarea',
      'weight' => 3,
      'settings' => [
        'rows' => 4,
        'placeholder' => 'Optional description of the link',
      ],
    ])
    ->setComponent('field_hotlink_thumbnail', [
      'type' => 'image_image',
      'weight' => 4,
      'settings' => [
        'progress_indicator' => 'throbber',
        'preview_image_style' => 'thumbnail',
      ],
    ])
    ->removeComponent('body')
    ->removeComponent('uid')
    ->removeComponent('created')
    ->removeComponent('promote')
    ->removeComponent('sticky')
    ->save();

  \Drupal::logger('hotlinks')->info('Configured form display');
}

/**
 * Configure default view display.
 */
function _hotlinks_configure_default_view_display() {
  $view_display = EntityViewDisplay::load('node.hotlink.default');
  if (!$view_display) {
    $view_display = EntityViewDisplay::create([
      'targetEntityType' => 'node',
      'bundle' => 'hotlink',
      'mode' => 'default',
      'status' => TRUE,
    ]);
  }

  $view_display
    ->setComponent('field_hotlink_thumbnail', [
      'type' => 'image',
      'label' => 'hidden',
      'weight' => 0,
      'settings' => [
        'image_style' => 'large',
        'image_link' => '',
      ],
    ])
    ->setComponent('field_hotlink_url', [
      'type' => 'link',
      'label' => 'hidden',
      'weight' => 1,
      'settings' => [
        'trim_length' => 80,
        'url_only' => FALSE,
        'url_plain' => FALSE,
        'rel' => 'noopener noreferrer',
        'target' => '_blank',
      ],
    ])
    ->setComponent('field_hotlink_category', [
      'type' => 'entity_reference_label',
      'label' => 'inline',
      'weight' => 2,
      'settings' => [
        'link' => TRUE,
      ],
    ])
    ->setComponent('field_hotlink_description', [
      'type' => 'text_default',
      'label' => 'hidden',
      'weight' => 3,
    ])
    ->removeComponent('body')
    ->removeComponent('links')
    ->save();

  \Drupal::logger('hotlinks')->info('Configured default view display');
}

/**
 * Configure hotlinks_index view display.
 */
function _hotlinks_configure_index_view_display() {
  // First verify the view mode exists
  $view_mode = \Drupal::entityTypeManager()
    ->getStorage('entity_view_mode')
    ->load('node.hotlinks_index');
    
  if (!$view_mode) {
    throw new \Exception('Hotlinks_index view mode not found. Cannot configure display.');
  }

  $index_view_display = EntityViewDisplay::load('node.hotlink.hotlinks_index');
  if (!$index_view_display) {
    $index_view_display = EntityViewDisplay::create([
      'targetEntityType' => 'node',
      'bundle' => 'hotlink',
      'mode' => 'hotlinks_index',
      'status' => TRUE,
    ]);
  }

  $index_view_display
    ->setComponent('title', [
      'type' => 'string',
      'label' => 'hidden',
      'weight' => 0,
      'settings' => [
        'link_to_entity' => TRUE,
      ],
    ])
    ->setComponent('field_hotlink_thumbnail', [
      'type' => 'image',
      'label' => 'hidden',
      'weight' => 1,
      'settings' => [
        'image_style' => 'thumbnail',
        'image_link' => 'content',
      ],
    ])
    ->setComponent('field_hotlink_url', [
      'type' => 'link',
      'label' => 'hidden',
      'weight' => 2,
      'settings' => [
        'trim_length' => 80,
        'url_only' => FALSE,
        'url_plain' => FALSE,
        'rel' => 'noopener noreferrer',
        'target' => '_blank',
      ],
    ])
    ->setComponent('field_hotlink_category', [
      'type' => 'entity_reference_label',
      'label' => 'inline',
      'weight' => 3,
      'settings' => [
        'link' => TRUE,
      ],
    ])
    ->setComponent('field_hotlink_description', [
      'type' => 'text_default',
      'label' => 'hidden',
      'weight' => 4,
    ])
    ->removeComponent('body')
    ->removeComponent('links')
    ->save();

  \Drupal::logger('hotlinks')->info('Configured hotlinks_index view display');
}

/**
 * Set default configuration.
 */
function _hotlinks_set_default_config() {
  $config = \Drupal::configFactory()->getEditable('hotlinks.settings');
  
  // Only set values if they don't already exist
  if ($config->get('show_descriptions') === NULL) {
    $config->set('show_descriptions', TRUE);
  }
  if ($config->get('open_in_new_window') === NULL) {
    $config->set('open_in_new_window', TRUE);
  }
  if ($config->get('show_category_counts') === NULL) {
    $config->set('show_category_counts', TRUE);
  }
  if ($config->get('auto_thumbnail_service') === NULL) {
    $config->set('auto_thumbnail_service', 'thum_io');
  }
  if ($config->get('screenshotapi_key') === NULL) {
    $config->set('screenshotapi_key', '');
  }
  if ($config->get('htmlcsstoimage_key') === NULL) {
    $config->set('htmlcsstoimage_key', '');
  }
  
  $config->save();
  \Drupal::logger('hotlinks')->info('Set default configuration');
}

/**
 * Update hook to add test data functionality.
 */
function hotlinks_update_8001() {
  // Clear menu cache to ensure new menu items appear
  \Drupal::service('plugin.manager.menu.link')->rebuild();
  
  // Clear routing cache to ensure new routes are available
  \Drupal::service('router.builder')->rebuild();
  
  // Clear service container to register new services
  \Drupal::service('kernel')->invalidateContainer();
  
  return t('Added test data management functionality.');
}

/**
 * Helper function to check if test data already exists.
 */
function hotlinks_test_data_exists() {
  // Check for test categories
  $test_categories = [
    'Technology',
    'Science', 
    'News & Media',
    'Education',
    'Entertainment',
    'Health & Wellness',
  ];
  
  $existing_categories = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term')
    ->loadByProperties([
      'vid' => 'hotlink_categories',
      'name' => $test_categories,
    ]);
    
  if (!empty($existing_categories)) {
    return TRUE;
  }
  
  // Check for test hotlinks
  $test_titles = [
    'GitHub - Where Software is Built',
    'Stack Overflow - Developer Community',
    'NASA - National Aeronautics and Space Administration',
  ];
  
  $existing_hotlinks = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadByProperties([
      'type' => 'hotlink',
      'title' => $test_titles,
    ]);
    
  return !empty($existing_hotlinks);
}

/**
 * Drush command helper function for generating test data.
 */
function hotlinks_drush_generate_test_data($options = []) {
  $options += [
    'categories' => TRUE,
    'hotlinks' => TRUE,
    'users' => TRUE,
    'reviews' => TRUE,
    'thumbnails' => TRUE,
  ];
  
  try {
    $test_data_service = \Drupal::service('hotlinks.test_data');
    $results = $test_data_service->generateTestData($options);
    
    $messages = [];
    if ($results['categories'] > 0) {
      $messages[] = "Created {$results['categories']} categories";
    }
    if ($results['hotlinks'] > 0) {
      $messages[] = "Created {$results['hotlinks']} hotlinks";
    }
    if ($results['users'] > 0) {
      $messages[] = "Created {$results['users']} users";
    }
    if ($results['reviews'] > 0) {
      $messages[] = "Created {$results['reviews']} reviews";
    }
    
    if (!empty($messages)) {
      drush_print("Test data generated successfully: " . implode(', ', $messages));
    } else {
      drush_print("No new test data created. Data may already exist.");
    }
    
    if (!empty($results['errors'])) {
      foreach ($results['errors'] as $error) {
        drush_print("Error: " . $error, 0, STDERR);
      }
    }
    
  } catch (\Exception $e) {
    drush_print("Failed to generate test data: " . $e->getMessage(), 0, STDERR);
    return FALSE;
  }
  
  return TRUE;
}

/**
 * Drush command helper function for removing test data.
 */
function hotlinks_drush_remove_test_data() {
  try {
    $test_data_service = \Drupal::service('hotlinks.test_data');
    $results = $test_data_service->removeTestData();
    
    $messages = [];
    if ($results['hotlinks'] > 0) {
      $messages[] = "Removed {$results['hotlinks']} hotlinks";
    }
    if ($results['categories'] > 0) {
      $messages[] = "Removed {$results['categories']} categories";
    }
    if ($results['users'] > 0) {
      $messages[] = "Removed {$results['users']} users";
    }
    if ($results['reviews'] > 0) {
      $messages[] = "Cleaned up review database";
    }
    
    if (!empty($messages)) {
      drush_print("Test data removed successfully: " . implode(', ', $messages));
    } else {
      drush_print("No test data found to remove.");
    }
    
    if (!empty($results['errors'])) {
      foreach ($results['errors'] as $error) {
        drush_print("Error: " . $error, 0, STDERR);
      }
    }
    
  } catch (\Exception $e) {
    drush_print("Failed to remove test data: " . $e->getMessage(), 0, STDERR);
    return FALSE;
  }
  
  return TRUE;
}

/**
 * Implements hook_uninstall().
 */
function hotlinks_uninstall() {
  // Delete all hotlink nodes
  $nids = \Drupal::entityQuery('node')
    ->condition('type', 'hotlink')
    ->accessCheck(FALSE)
    ->execute();
  
  if (!empty($nids)) {
    $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($nids);
    foreach ($nodes as $node) {
      $node->delete();
    }
    \Drupal::logger('hotlinks')->info('Deleted @count hotlink nodes', ['@count' => count($nodes)]);
  }

  // Delete the content type
  $node_type = \Drupal::entityTypeManager()->getStorage('node_type')->load('hotlink');
  if ($node_type) {
    $node_type->delete();
    \Drupal::logger('hotlinks')->info('Deleted hotlink content type');
  }

  // Delete the view mode
  $view_mode = \Drupal::entityTypeManager()->getStorage('entity_view_mode')->load('node.hotlinks_index');
  if ($view_mode) {
    $view_mode->delete();
    \Drupal::logger('hotlinks')->info('Deleted hotlinks_index view mode');
  }

  // Delete the vocabulary and its terms
  $vocabulary = \Drupal::entityTypeManager()->getStorage('taxonomy_vocabulary')->load('hotlink_categories');
  if ($vocabulary) {
    $vocabulary->delete();
    \Drupal::logger('hotlinks')->info('Deleted hotlink_categories vocabulary');
  }

  // Delete configuration
  \Drupal::configFactory()->getEditable('hotlinks.settings')->delete();
  \Drupal::logger('hotlinks')->info('Deleted hotlinks configuration');
}
<?php

/**
 * @file
 * Installation and update hooks for Views integration.
 * Add this code to your hotlinks.install file.
 */

/**
 * Install the Views configuration for Hotlinks.
 * 
 * Add this function to your hotlinks.install file.
 */
function hotlinks_update_8002() {
  // Check if Views module is enabled
  if (!\Drupal::moduleHandler()->moduleExists('views')) {
    throw new \Exception('Views module must be enabled to use Views-based hotlinks display.');
  }

  try {
    // Import the view configuration
    $config_path = \Drupal::service('extension.list.module')->getPath('hotlinks') . '/config/install';
    $config_source = new \Drupal\Core\Config\FileStorage($config_path);
    
    $config_name = 'views.view.hotlinks_by_category';
    
    if ($config_source->exists($config_name)) {
      $config_data = $config_source->read($config_name);
      
      // Generate a proper UUID if not present
      if (empty($config_data['uuid'])) {
        $config_data['uuid'] = \Drupal::service('uuid')->generate();
      }
      
      \Drupal::configFactory()
        ->getEditable($config_name)
        ->setData($config_data)
        ->save();
        
      // Clear Views cache
      if (\Drupal::hasService('views.views_data')) {
        \Drupal::service('views.views_data')->clear();
      }
      
      // Clear routing cache since we're adding new routes
      \Drupal::service('router.builder')->rebuild();
      
      return t('Installed Views-based hotlinks display. You can now use Views to customize your hotlinks listings.');
    } else {
      throw new \Exception('Views configuration file not found.');
    }
    
  } catch (\Exception $e) {
    \Drupal::logger('hotlinks')->error('Error installing Views configuration: @message', [
      '@message' => $e->getMessage(),
    ]);
    throw $e;
  }
}

/**
 * Enable the Views integration.
 * 
 * Call this function after enabling the Views module.
 */
function hotlinks_enable_views_integration() {
  // Update routing to use the new Views controller
  \Drupal::service('router.builder')->rebuild();
  
  // Clear all caches to ensure new templates and services are available
  drupal_flush_all_caches();
  
  \Drupal::messenger()->addMessage(t('Views integration has been enabled. Category pages now use Views for display.'));
}

/**
 * Check system requirements for Views integration.
 */
function hotlinks_check_views_requirements() {
  $requirements = [];
  
  // Check if Views is enabled
  $requirements['views'] = [
    'title' => 'Views Module',
    'status' => \Drupal::moduleHandler()->moduleExists('views'),
    'message' => \Drupal::moduleHandler()->moduleExists('views') ? 
      'Views module is enabled' : 
      'Views module is required for advanced hotlinks display',
  ];
  
  // Check if our view exists
  $view_exists = \Drupal::entityTypeManager()
    ->getStorage('view')
    ->load('hotlinks_by_category') !== NULL;
    
  $requirements['hotlinks_view'] = [
    'title' => 'Hotlinks View Configuration',
    'status' => $view_exists,
    'message' => $view_exists ? 
      'Hotlinks view is properly configured' : 
      'Hotlinks view configuration is missing - run update hooks',
  ];
  
  // Check if Twig extension is registered
  $twig_extension_exists = \Drupal::hasService('hotlinks.twig_extension');
  
  $requirements['twig_extension'] = [
    'title' => 'Hotlinks Twig Extension',
    'status' => $twig_extension_exists,
    'message' => $twig_extension_exists ? 
      'Twig extension is registered' : 
      'Twig extension is not registered - clear caches',
  ];
  
  return $requirements;
}

/**
 * Migrate from custom controller to Views-based display.
 * 
 * This function helps transition existing sites.
 */
function hotlinks_migrate_to_views() {
  $messenger = \Drupal::messenger();
  
  try {
    // Backup existing configuration
    $config = \Drupal::configFactory()->getEditable('hotlinks.settings');
    $backup_settings = $config->getRawData();
    
    // Store backup in state for rollback if needed
    \Drupal::state()->set('hotlinks.pre_views_backup', $backup_settings);
    
    // Install Views configuration
    hotlinks_update_8002();
    
    // Update any custom themes/templates that might be affected
    $theme_suggestions = [
      'node--hotlink--hotlinks-index.html.twig',
      'taxonomy-term--hotlink-categories.html.twig',
      'views-view--hotlinks-by-category.html.twig',
    ];
    
    $theme_path = \Drupal::service('theme_handler')->getDefault();
    $theme_templates_exist = FALSE;
    
    foreach ($theme_suggestions as $template) {
      $template_path = DRUPAL_ROOT . '/themes/' . $theme_path . '/templates/' . $template;
      if (file_exists($template_path)) {
        $theme_templates_exist = TRUE;
        break;
      }
    }
    
    if ($theme_templates_exist) {
      $messenger->addWarning(t('Custom templates detected in your theme. You may need to update them for Views compatibility.'));
    }
    
    // Set flag to indicate Views migration is complete
    $config->set('views_integration_enabled', TRUE);
    $config->save();
    
    $messenger->addMessage(t('Successfully migrated to Views-based display. Your hotlinks are now powered by Views!'));
    
    return TRUE;
    
  } catch (\Exception $e) {
    // Rollback on error
    if ($backup_settings = \Drupal::state()->get('hotlinks.pre_views_backup')) {
      \Drupal::configFactory()
        ->getEditable('hotlinks.settings')
        ->setData($backup_settings)
        ->save();
    }
    
    $messenger->addError(t('Migration to Views failed: @error', ['@error' => $e->getMessage()]));
    
    return FALSE;
  }
}

/**
 * Rollback Views integration if needed.
 */
function hotlinks_rollback_views_integration() {
  try {
    // Remove the view
    $view = \Drupal::entityTypeManager()->getStorage('view')->load('hotlinks_by_category');
    if ($view) {
      $view->delete();
    }
    
    // Restore backup settings
    $backup_settings = \Drupal::state()->get('hotlinks.pre_views_backup');
    if ($backup_settings) {
      \Drupal::configFactory()
        ->getEditable('hotlinks.settings')
        ->setData($backup_settings)
        ->save();
      
      \Drupal::state()->delete('hotlinks.pre_views_backup');
    }
    
    // Update routing back to original controller
    \Drupal::service('router.builder')->rebuild();
    
    // Clear caches
    drupal_flush_all_caches();
    
    \Drupal::messenger()->addMessage(t('Views integration has been rolled back to the original custom controller.'));
    
    return TRUE;
    
  } catch (\Exception $e) {
    \Drupal::messenger()->addError(t('Rollback failed: @error', ['@error' => $e->getMessage()]));
    return FALSE;
  }
}